%YAML 1.2
---
# Syntax: sublimetext.com/docs/syntax.html

name: Pkl
file_extensions: [pkl, pcf]
scope: source.pkl

variables:
  escape-chars: '(?:\\|\\#|\\##|\\###|\\####|\\#####|\\######)'
contexts:
  main:
    - include: comments
    - include: custom-string-1
    - include: strings
    - include: keyword
    - include: class
    - include: literal
    - include: number
    - include: built-in
    - include: super
    - include: type
    - include: operator
    - include: method
    - include: all

  comments:
    - include: comment-single-line
    - include: comment-multi-line

  comment-single-line:
    - match: //
      scope: punctuation.definition.comment.pkl
      push:
        - meta_scope: comment.line.pkl
        - match: $\n?
          pop: true

  comment-multi-line:
    - match: /\*
      scope: punctuation.definition.comment.begin.pkl
      push:
        - meta_scope: comment.block.pkl
        - match: \*/
          scope: punctuation.definition.comment.end.pkl
          pop: true
        - match: '^\s*(\*)(?!/)'
          captures:
            0: punctuation.definition.comment.pkl
    - include: comment-error

  comment-error:
    - match: \*/
      scope: invalid.illegal.pkl


  escaped-char:
    - match: '[\\"tnr]'
      scope: constant.character.escape.pkl
      pop: true

  escaped-unicode-char:
    - match: 'u\{\h{1,6}\}'
      scope: constant.character.escape.unicode.pkl
      pop: true

  string-interpolation:
    - match: \(
      push:
        - clear_scopes: 1
        - meta_scope: meta.interpolation.pkl
        - match: \)
          scope: punctuation.section.interpolation.end.pkl
          pop: 2 # pops both the ( and the {escape}
        - include: main

  escape-char-0:
    - match: '\\'
      scope: constant.character.escape.pkl
      push:
        - include: string-interpolation
        - include: escaped-char
        - include: escaped-unicode-char

  escape-char-1:
    - match: '\\#'
      scope: constant.character.escape.pkl
      push:
        - include: string-interpolation
        - include: escaped-char
        - include: escaped-unicode-char

  escape-char-2:
    - match: '\\##'
      scope: constant.character.escape.pkl
      push:
        - include: string-interpolation
        - include: escaped-char
        - include: escaped-unicode-char

  strings:
    - include: string-quoted
    - include: string-multi-line-2
    - include: string-single-line-2
    - include: string-multi-line-1
    - include: string-single-line-1
    - include: string-multi-line-0
    - include: string-single-line-0

  string-single-line-0:
    - match: '"'
      scope: string.quoted.double.0.pkl punctuation.definition.string.begin.0.pkl
      push:
        - meta_content_scope: meta.string.pkl string.quoted.double.0.pkl
        - match: '"'
          scope: punctuation.definition.string.end.0.pkl
          pop: true
        - include: escape-char-0

  string-single-line-1:
    - match: '#"'
      scope: string.quoted.double.1.pkl punctuation.definition.string.begin.1.pkl
      push:
        - meta_content_scope: meta.string.pkl string.quoted.double.1.pkl
        - match: '"#'
          scope: punctuation.definition.string.end.1.pkl
          pop: true
        - include: escape-char-1

  string-single-line-2:
  - match: '##"'
    scope: string.quoted.double.2.pkl punctuation.definition.string.begin.2.pkl
    push:
      - meta_content_scope: meta.string.pkl string.quoted.double.2.pkl
      - match: '"##'
        scope: punctuation.definition.string.end.2.pkl
        pop: true
      - include: escape-char-2

  string-multi-line-0:
    - match: '(""")\s*?$' # content must start on a new line
      scope: string.quoted.triple.0.pkl punctuation.definition.string.begin.0.pkl
      push:
        - meta_content_scope: meta.string.pkl string.quoted.triple.0.pkl
        - match: '^\s*?(""")' # closing delim must start on a new line
          scope: punctuation.definition.string.end.0.pkl
          pop: true
        - include: escape-char-0

  string-multi-line-1:
    - match: '(#""")\s*?$' # content must start on a new line
      scope: string.quoted.triple.1.pkl punctuation.definition.string.begin.1.pkl
      push:
        - meta_content_scope: meta.string.pkl string.quoted.triple.1.pkl
        - match: '^\s*?("""#)' # closing delim must start on a new line
          scope: punctuation.definition.string.end.1.pkl
          pop: true
        - include: escape-char-1
  string-multi-line-2:
    - match: '(##""")\s*?$' # content must start on a new line
      scope: string.quoted.triple.2.pkl punctuation.definition.string.begin.2.pkl
      push:
        - meta_content_scope: meta.string.pkl string.quoted.triple.2.pkl
        - match: '^\s*?("""##)' # closing delim must start on a new line
          scope: punctuation.definition.string.end.2.pkl
          pop: true
        - include: escape-char-2

  string-quoted:
    - match: \`
      scope:  meta.string.pkl string.quoted.single.pkl punctuation.definition.string.begin.pkl
      push:
        - meta_content_scope: meta.string.pkl string.quoted.single.pkl
        - match: \`
          scope: punctuation.definition.string.end.pkl
          pop: true
        - include: escape-char-0

  all:
    - match: ([_\w]+)\s*([=:{])
      captures:
        0: meta.pkl
        1: variable.pkl
        2: keyword.operator.assignment

  number:
    - match: (?:(?:[-]?)(?:[0-9e]*)(?:\.{1}){1}(?:[0-9e]+))
      scope: constant.numeric.float.decimal.pkl
    - match: \b(?:0[xX])(?:[_0-9a-fA-F]+)
      scope: constant.numeric.integer.hex.pkl
    - match: \b(?:0[bB])(?:[_0-9a-fA-F]+)
      scope: constant.numeric.integer.binary.pkl
    - match: \b(?:0[oO])(?:[_0-9a-fA-F]+)
      scope: constant.numeric.integer.octal.pkl
    - match: \b(?:[-]?)(?:[0-9_]+)
      scope: constant.numeric.integer.decimal.pkl

  built-in:
    - match: \b(JsonRenderer|YamlRenderer)\b
      scope: support.class.pkl

  operator:
    - match: '([+*/%-:&|^]|<<|>>>?)='
      scope: keyword.operator.assignment
    - match: '[+*/%-]'
      scope: keyword.operator.arithmetic
    - match: '\!|\&\&|\|\|'
      scope: keyword.operator.logical
    - match: '[~&|^]|<<|>>>?'
      scope: keyword.operator.bitwise
    - match: '==|<|>|<=|>='
      scope: keyword.operator.comparison

  punctuation:
    - match: \.
      scope: punctuation.delimiter.period.dot.pkl
    - match: \,
      scope: punctuation.delimiter.comma.pkl
    - match: \;
      scope: punctuation.definition.other.semicolon.pkl
    - match: ':'
      scope: punctuation.separator.key-value.colon.pkl
    - match: \(
      scope: punctuation.section.parens.begin.pkl
    - match: \)
      scope: punctuation.section.parens.end.pkl
    - match: \[
      scope: punctuation.section.brackets.begin.pkl
    - match: \]
      scope: punctuation.section.brackets.end.pkl
    - match: \?
      scope: punctuation.definition.other.questionmark.pkl
      # =
      # <
      # >
      # /
      # +
      # {
      # }
      # ->

  literal:
    - match: \b(true|false)\b
      scope: constant.language.boolean.pkl
    - match: \b(null)\b
      scope: constant.language.nan.pkl

  super:
    - match: \@(\w+)
      scope: keyword.pkl

  type:
    - match: \b(Int|String|Boolean|Float)\b
      scope: storage.type.pkl
    - match: \b(UInt16|UInt8|UInt)\b
      scope: storage.type.pkl

  keyword:
    - match: \b(let|function|protected|override|record|delete|match|vararg)\b
      scope: keyword.pkl
    - match: \b(if|else|for|when|switch|case)\b
      scope: keyword.control.conditional.pkl
    - match: \b(import|module|amends)\b
      scope: keyword.control.import.pkl
    - match: \b(is|as|in)\b
      scope: keyword.import.from.pkl
    - match: \b(const)\b
      scope: storage.modifier.toit
    - match: \b(class|extends|new)\b
      scope: keyword.pkl

  method:
    - match: '^(?:(const|))(?:(function|))\s+([A-Za-z0-9]{1,}(\(\)){1})'
      captures:
        0: meta.function.pkl
        1: storage.modifier.pkl
        2: keyword.pkl
        3: entity.name.function.pkl
        4: punctuation.section.parens.begin.pkl

  class:
    - match: '^(?:(open|))\s*(class)?\s+([A-Za-z0-9]{1,})(?:\s*(extends|))(?:\s*([A-Za-z0-9]{1,}|)):?$\n?'
      captures:
        0: meta.class.pkl
        1: keyword
        2: keyword.declaration.class.pkl
        3: support.class.pkl
        4: keyword
        5: support.class.pkl
