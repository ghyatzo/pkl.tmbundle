%YAML 1.2
---
# Syntax: sublimetext.com/docs/syntax.html

name: Pkl
file_extensions: [pkl, pcf]
scope: source.pkl

variables:
  digits: '(?:\d[\d_]*\d|\d)'
  bits: '(?:[0-1][0-1_]*[0-1]|[0-1])'
  octets: '(?:[0-7][0-7_]*[0-7]|[0-7])'
  hexa: '(?:[\da-fA-F][\da-fA-F_]*[\da-fA-F]|[\da-fA-F_])'

  variable: '(?:[\p{L}_$][\p{L}0-9_$]*)' # can't start with a number
  # baseType: '(?:{{variable}}\s*(?:<[^>]*>)?\s*(?:\([^)]*\))?\s*\??)' # eg: Listing<Mapping>(something)?
  baseType: '(?:\*?{{variable}}\s*(?:<[^>]*>)?)' # eg: Listing<Mapping>(something)?
  type: '(?:{{baseType}}\s*(\|\s*{{baseType}})*)' # eg: Listing<Float>|Mapping<Int>?|Duration

contexts:
  main:
    - include: module
    - include: typealias
    - include: variableDecl
    - include: variableDeclType
    - include: genericTypeMatch
    - include: forPattern
    - include: newPattern
    - include: functions
    - include: lambda-function
    - include: class
    - include: comments
    - include: strings
    - include: keyword
    - include: literal
    - include: number
    - include: super
    - include: type
    - include: operator

  comments:
    - include: comment-single-line
    - include: comment-multi-line

  comment-single-line:
    - match: //.*
      scope: comment.line.pkl

  comment-multi-line:
    - match: '/\*'
      scope: punctuation.definition.comment.begin.pkl
      push:
        - meta_content_scope: comment.block.pkl
        - match: '\*/'
          scope: punctuation.definition.comment.end.pkl
          pop: true
    - include: comment-error

  comment-error:
    - match: \*/
      scope: invalid.illegal.pkl

  escaped-char:
    - match: '[\\"tnr]'
      scope: constant.character.escape.pkl
      pop: true
    - match: 'u\{[\da-fA-F]{1,6}\}'
      scope: constant.character.escape.unicode.pkl
      pop: true

  string-interpolation:
    - match: \(
      push:
        - clear_scopes: 1
        - meta_scope: meta.interpolation.pkl
        - match: \)
          scope: punctuation.section.interpolation.end.pkl
          pop: 2 # pops both the ( and the {escape-char}
        - include: main

  escape-char-0:
    - match: '\\'
      scope: constant.character.escape.pkl
      push:
        - include: string-interpolation
        - include: escaped-char

  escape-char-1:
    - match: '\\#'
      scope: constant.character.escape.pkl
      push:
        - include: string-interpolation
        - include: escaped-char

  escape-char-2:
    - match: '\\##'
      scope: constant.character.escape.pkl
      push:
        - include: string-interpolation
        - include: escaped-char

  strings:
    - include: string-quoted
    - include: string-multi-line-2
    - include: string-single-line-2
    - include: string-multi-line-1
    - include: string-single-line-1
    - include: string-multi-line-0
    - include: string-single-line-0

  string-single-line-0:
    - match: '"'
      scope: string.quoted.double.0.pkl punctuation.definition.string.begin.0.pkl
      push:
        - meta_content_scope: meta.string.pkl string.quoted.double.0.pkl
        - match: '"'
          scope: punctuation.definition.string.end.0.pkl
          pop: true
        - include: escape-char-0

  string-single-line-1:
    - match: '#"'
      scope: string.quoted.double.1.pkl punctuation.definition.string.begin.1.pkl
      push:
        - meta_content_scope: meta.string.pkl string.quoted.double.1.pkl
        - match: '"#'
          scope: punctuation.definition.string.end.1.pkl
          pop: true
        - include: escape-char-1

  string-single-line-2:
    - match: '##"'
      scope: string.quoted.double.2.pkl punctuation.definition.string.begin.2.pkl
      push:
        - meta_content_scope: meta.string.pkl string.quoted.double.2.pkl
        - match: '"##'
          scope: punctuation.definition.string.end.2.pkl
          pop: true
        - include: escape-char-2

  string-multi-line-0:
    - match: '(""")\s*?$' # content must start on a new line
      scope: string.quoted.triple.0.pkl punctuation.definition.string.begin.0.pkl
      push:
        - meta_content_scope: meta.string.pkl string.quoted.triple.0.pkl
        - match: '^\s*?(""")' # closing delim must start on a new line
          scope: punctuation.definition.string.end.0.pkl
          pop: true
        - include: escape-char-0

  string-multi-line-1:
    - match: '(#""")\s*?$' # content must start on a new line
      scope: string.quoted.triple.1.pkl punctuation.definition.string.begin.1.pkl
      push:
        - meta_content_scope: meta.string.pkl string.quoted.triple.1.pkl
        - match: '^\s*?("""#)' # closing delim must start on a new line
          scope: punctuation.definition.string.end.1.pkl
          pop: true
        - include: escape-char-1

  string-multi-line-2:
    - match: '(##""")\s*?$' # content must start on a new line
      scope: string.quoted.triple.2.pkl punctuation.definition.string.begin.2.pkl
      push:
        - meta_content_scope: meta.string.pkl string.quoted.triple.2.pkl
        - match: '^\s*?("""##)' # closing delim must start on a new line
          scope: punctuation.definition.string.end.2.pkl
          pop: true
        - include: escape-char-2

  string-quoted:
    - match: \`
      scope:  meta.string.pkl string.quoted.single.pkl punctuation.definition.string.begin.pkl
      push:
        - meta_content_scope: meta.string.pkl string.quoted.single.pkl
        - match: \`
          scope: punctuation.definition.string.end.pkl
          pop: true
        - include: escape-char-0

  number:
    - match: '(?:{{digits}}?\.{{digits}}(?:[eE][+-]?{{digits}})?|{{digits}}[eE][+-]?{{digits}})'
      scope: constant.numeric.float.pkl
    - match: '(?:0[xX]){{hexa}}'
      scope: constant.numeric.integer.hex.pkl
    - match: '(?:0[bB]){{bits}}'
      scope: constant.numeric.integer.binary.pkl
    - match: '(?:0[oO]){{octets}}'
      scope: constant.numeric.integer.octal.pkl
    - match: '{{digits}}'
      scope: constant.numeric.integer.decimal.pkl

  operator:
    - match: '\|>|\?\?|!!|\->|\|'
      scope: keyword.operator.pkl
    - match: '(==|!=|<=|>=|>|<)'
      scope: keyword.operator.comparison
    - match: '='
      scope: keyword.operator.assignment
    - match: '(\*\*|[+\-*\/%]|~\/)'
      scope: keyword.operator.arithmetic
    - match: '[~&|^]|<<|>>>?'
      scope: keyword.operator.bitwise
    - match: '\!|\&\&|\|\|'
      scope: keyword.operator.logical

  punctuation:
    - match: '\.\b'
      scope: punctuation.accessor
    - match: \,
      scope: punctuation.separator.comma.pkl
    - match: \;
      scope: punctuation.terminator.semicolon.pkl
    - match: ':'
      scope: punctuation.separator.colon.pkl
    - match: \(
      scope: punctuation.section.parens.begin.pkl
    - match: \)
      scope: punctuation.section.parens.end.pkl
    - match: \[
      scope: punctuation.section.brackets.begin.pkl
    - match: \]
      scope: punctuation.section.brackets.end.pkl
    - match: \?
      scope: punctuation.definition.other.questionmark.pkl

  literal:
    - match: \b(true|false)\b
      scope: constant.language.boolean.pkl
    - match: \b(null)\b
      scope: constant.language.null.pkl
    - match: \b(NaN)\b
      scope: constant.language.nan.pkl
    - match: \b(Infinity)\b
      scope: constant.language.infinity.pkl

  super:
    - match: \@({{variable}})
      scope: keyword.pkl

  type:
    - match: \b(Int|String|Boolean|Float|Number|Any|Base)\b
      scope: storage.type.pkl
    - match: \b(UInt16|UInt8|UInt)\b
      scope: storage.type.pkl
    - match: \b(Collection|List|Set|Map|Listing|Mapping)\b
      scope: entity.name.type.pkl

  keyword:
    - match: \b(|protected|override|record|delete|match|case|vararg|const)\b
      scope: keyword.other.pkl
    - match: '\b(read\?|read\*|read|import\*)\b?'
      scope: keyword.import.pkl
    - match: \b(if|else|for|when)\b
      scope: keyword.control.conditional.pkl
    - match: \b(hidden|local|abstract|external|open|in|out|amends|extends|fixed)\b
      scope: storage.modifier.pkl
    - match: \b(class|typealias)\b
      scope: keyword.declaration.class.pkl
    - match: '\b(amends|as|extends|function|is|let|read|import|throw|trace)\b'
      scope: keyword.pkl
    - match: \b(this|module|outer|super)\b
      scope: variable.language.pkl

  module:
    - match: '(?:(module)\s+({{variable}}(?:\.{{variable}}))?)'
      captures:
        0: meta.module.pkl
        1: variable.language.pkl
        2: variable.other.module.pkl

  typealias:
    - match: '(typealias)\s+({{variable}})\s*(=)\s*({{type}})'
      captures:
        0: meta.typealias.pkl
        1: keyword.declaration.class.pkl
        2: entity.name.type.pkl
        3: keyword.operator.assignment.pkl
        4: entity.name.type.pkl

  variableDecl:
    - match: '(\b{{variable}}|`[^`]+`)\s*(?:(=)(?!=)|(?={))'
      captures:
        0: meta.variable.declaration.pkl
        1: variable.other.property.pkl
        2: keyword.operator.assignment.pkl

  variableDeclType:
    - match: '(\b{{variable}}|`[^`]+`)\s*(:)\s*({{type}})'
      captures:
        0: meta.variable.declaration.pkl
        1: variable.other.property.pkl
        2: punctuation.separator.pkl
        3: entity.name.type.pkl

  genericTypeMatch:
    - match: '(:)\s*({{type}})'
      captures:
        0: meta.annotation.identifier.pkl
        1: punctuation.separator.pkl
        2: entity.name.type.pkl

  forPattern:
    - match: '\b(for)\s*\(({{variable}})(?:\s*,\s*({{variable}}))*\s+(in)'
      captures:
        0: meta.block.for.pkl
        1: keyword.control.loop.for.pkl
        2: variable.other.property.pkl
        3: variable.other.property.pkl
        4: storage.modifier.pkl

  functions:
    - match: '\b(function)\s+({{variable}})'
      captures:
        0: meta.function.pkl
        1: keyword.pkl
        2: entity.name.function.pkl

  lambda-function:
    - match: '(\({{variable}}\))\s*\->\s*'
      captures:
        0: meta.function.anonymous.pkl
        1: variable.other.pkl

  class:
    - match: '(open)?(class)\s+(\w+)(?:\s*(extends)\s+(\w+))?'
      captures:
        0: meta.class.pkl
        1: keyword.other.pkl
        2: keyword.declaration.class.pkl
        3: entity.name.class.pkl
        4: keyword.pkl
        5: support.type.pkl

  newPattern:
    - match: '\b(new)\s+({{variable}})?'
      captures:
        1: keyword.pkl
        2: support.type.pkl
