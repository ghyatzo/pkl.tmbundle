%YAML 1.2
---
# Syntax: sublimetext.com/docs/syntax.html

name: Pkl
file_extensions: [pkl, pcf]
scope: source.pkl

variables:
  digits: '(?:\d[\d_]*\d|\d)'
  bits: '(?:[0-1][0-1_]*[0-1]|[0-1])'
  octets: '(?:[0-7][0-7_]*[0-7]|[0-7])'
  hexa: '(?:[\da-fA-F][\da-fA-F_]*[\da-fA-F]|[\da-fA-F_])'

  base_ident: '(?:[\p{L}_$][\p{L}0-9_$]*\b)' # can't start with a number
  quoted_ident: '(?:`(?:{{base_ident}}\s*)+`)'
  ident: '(?:{{base_ident}}|{{quoted_ident}})'
  # baseType: '(?:{{ident}}\s*(?:<[^>]*>)?\s*(?:\([^)]*\))?\s*\??)' # eg: Listing<Mapping>(something)?
  baseType: '(?:\*?{{ident}}\s*(?:<[^>]*>)?)' # eg: Listing<Mapping>
  type: '(?:{{baseType}}\s*(\|\s*{{baseType}})*)' # eg: Listing<Float>|Mapping<Int>?|Duration

  stdlib_bas: |-
    (?x:  # WIP
      Regex|Undefined|TODO|IntSeq|getClass|toString|ifNonNull
      |hasProperty|getProperty|toDynamic|toMap|relativePathTo
      |xor|implies
    )

  duration_unit: (?:ns|us|ms|s|min|h|d)
  data_size_unit: (?:b|kb|kib|mb|mib|gb|gib|tb|tib|pb|pib)

contexts:
  main:
    - include: typealias
    - include: isPattern
    - include: functions
    - include: lambda-function
    - include: class-declaration
    - include: object-declaration
    - include: member-predicate
    - include: comments
    - include: strings
    - include: keyword
    - include: constants
    - include: super
    - include: operator
    - include: punctuation
    - include: identifiers
    - include: brackets

  comments:
    - match: //.*
      scope: comment.line.pkl
    - match: '/\*'
      scope: punctuation.definition.comment.begin.pkl
      push:
        - meta_content_scope: comment.block.pkl
        - match: '\*/'
          scope: punctuation.definition.comment.end.pkl
          pop: true
    - match: '\*/'
      scope: invalid.illegal.pkl

  escaped-char:
    - match: '[\\"tnr]'
      scope: constant.character.escape.pkl
      pop: true
    - match: 'u\{[\da-fA-F]{1,6}\}'
      scope: constant.character.escape.unicode.pkl
      pop: true

  string-interpolation:
    - match: \(
      scope: punctuation.section.interpolation.begin.pkl
      push:
        - clear_scopes: 1
        - meta_scope: meta.interpolation.pkl
        - match: \)
          scope: punctuation.section.interpolation.end.pkl
          pop: 2 # pops both the ( and the {escape-char}
        - include: main

  escape-char-0:
    - match: '\\'
      scope: constant.character.escape.pkl
      push:
        - include: string-interpolation
        - include: escaped-char

  escape-char-1:
    - match: '\\#'
      scope: constant.character.escape.pkl
      push:
        - include: string-interpolation
        - include: escaped-char

  escape-char-2:
    - match: '\\##'
      scope: constant.character.escape.pkl
      push:
        - include: string-interpolation
        - include: escaped-char

  strings:
    - include: string-multi-line-2
    - include: string-single-line-2
    - include: string-multi-line-1
    - include: string-single-line-1
    - include: string-multi-line-0
    - include: string-single-line-0

  string-single-line-0:
    - match: '"'
      scope: string.quoted.double.0.pkl punctuation.definition.string.begin.0.pkl
      push:
        - meta_content_scope: string.quoted.double.0.pkl
        - match: '"'
          scope: string.quoted.double.0.pkl punctuation.definition.string.end.0.pkl
          pop: true
        - include: escape-char-0

  string-single-line-1:
    - match: '#"'
      scope: string.quoted.double.1.pkl punctuation.definition.string.begin.1.pkl
      push:
        - meta_content_scope: string.quoted.double.1.pkl
        - match: '"#'
          scope: string.quoted.double.1.pkl punctuation.definition.string.end.1.pkl
          pop: true
        - include: escape-char-1

  string-single-line-2:
    - match: '##"'
      scope: string.quoted.double.2.pkl punctuation.definition.string.begin.2.pkl
      push:
        - meta_content_scope: string.quoted.double.2.pkl
        - match: '"##'
          scope: string.quoted.double.2.pkl punctuation.definition.string.end.2.pkl
          pop: true
        - include: escape-char-2

  string-multi-line-0:
    - match: '(""")\s*?$' # content must start on a new line
      scope: string.quoted.triple.0.pkl punctuation.definition.string.begin.0.pkl
      push:
        - meta_content_scope: string.quoted.triple.0.pkl
        - match: '^\s*?(""")' # closing delim must start on a new line
          scope: string.quoted.triple.0.pkl punctuation.definition.string.end.0.pkl
          pop: true
        - include: escape-char-0

  string-multi-line-1:
    - match: '(#""")\s*?$' # content must start on a new line
      scope: string.quoted.triple.1.pkl punctuation.definition.string.begin.1.pkl
      push:
        - meta_content_scope: string.quoted.triple.1.pkl
        - match: '^\s*?("""#)' # closing delim must start on a new line
          scope: string.quoted.triple.1.pkl punctuation.definition.string.end.1.pkl
          pop: true
        - include: escape-char-1

  string-multi-line-2:
    - match: '(##""")\s*?$' # content must start on a new line
      scope: string.quoted.triple.2.pkl punctuation.definition.string.begin.2.pkl
      push:
        - meta_content_scope: string.quoted.triple.2.pkl
        - match: '^\s*?("""##)' # closing delim must start on a new line
          scope: string.quoted.triple.2.pkl punctuation.definition.string.end.2.pkl
          pop: true
        - include: escape-char-2

  constants:
    - match: '\b(?:{{digits}}?\.{{digits}}(?:[eE][+-]?{{digits}})?|{{digits}}[eE][+-]?{{digits}})\b'
      scope: constant.numeric.float.pkl
      push: after-expression
    - match: '\b(?:0[xX]){{hexa}}\b'
      scope: constant.numeric.integer.hex.pkl
      push: after-expression
    - match: '\b(?:0[bB]){{bits}}\b'
      scope: constant.numeric.integer.binary.pkl
      push: after-expression
    - match: '\b(?:0[oO]){{octets}}\b'
      scope: constant.numeric.integer.octal.pkl
      push: after-expression
    - match: '\b{{digits}}\b'
      scope: constant.numeric.integer.decimal.pkl
      push: after-expression
    - match: \b(true|false)\b
      scope: constant.language.boolean.pkl
    - match: \b(null)\b
      scope: constant.language.null.pkl
    - match: \b(NaN)\b
      scope: constant.language.nan.pkl
    - match: \b(Infinity)\b
      scope: constant.language.infinity.pkl

  operator:
    - match: \.\.\.\?|\.\.\.|'\|>|\?\.|\?\?|!!|\->|\|'
      scope: keyword.operator.pkl
    - match: '(==|!=|<=|>=|>|<)'
      scope: keyword.operator.comparison
    - match: '='
      scope: keyword.operator.assignment
    - match: '(\*\*|[+\-*\/%]|~\/)'
      scope: keyword.operator.arithmetic
    - match: '[~&|^]|<<|>>>?'
      scope: keyword.operator.bitwise
    - match: '\!|\&\&|\|\|'
      scope: keyword.operator.logical

  keyword:
    - match: \b(protected|override|record|delete|match|case|vararg|const)\b
      scope: keyword.other.pkl
    - match: '\b(read\?|read\*|read|import\*)\b?'
      scope: keyword.import.pkl
    - match: \b(if|else|when)\b
      scope: keyword.control.conditional.pkl
    - match: \b(for)\b
      scope: keyword.control.loop.pkl
    - match: \b(hidden|local|abstract|external|open|in|out|amends|extends|fixed)\b
      scope: storage.modifier.pkl
    - match: \b(class|typealias)\b
      scope: storage.type.class.pkl keyword.declaration.class.pkl
    - match: '\b(amends|as|extends|function|is|let|read|import|throw|trace|module)\b'
      scope: keyword.pkl
    - match: \b(this|outer|super)\b
      scope: variable.language.pkl

  punctuation:
    - match: ';'
      scope: punctuation.terminator.pkl


  super:
    - match: \@({{base_ident}})
      scope: keyword.pkl

  identifiers:
    - match: '`'
      scope: punctuation.section.quoted.begin.pkl
      push:
        - meta_content_scope: variable.other.quoted.pkl
        - match: '`'
          scope: punctuation.section.quoted.end.pkl
          set: after-expression
    - match: '\[(?!\[)'
      scope: punctuation.section.brackets.begin.pkl
      push:
        - meta_content_scope: variable.other.entry.pkl
        - match: '\]'
          scope: punctuation.section.brackets.end.pkl
          pop: true
        - match: '{{ident}}'
          scope: variable.other.key.pkl
        - include: strings
    - match: '{{ident}}\s*(?==)'
      scope: variable.other.property.pkl
    - match: '{{ident}}\s*(?={)'
      scope: variable.other.object.pkl
    - match: '{{base_ident}}'
      scope: variable.other.pkl
      push: after-expression

  class-declaration:
    - match: '\b(open)\b'
      scope: storage.modifier.pkl
    - match: '\b(class)\s+({{ident}})(?:\s*(extends)\s+({{ident}}))?'
      captures:
        1: storage.type.class.pkl keyword.declaration.class.pkl
        2: entity.name.class.pkl
        3: storage.modifier.pkl
        4: entity.name.class.pkl
      push: class-block

  class-block:
    - match: '\{'
      scope: punctuation.section.class.begin.pkl
      set:
        - meta_content_scope: meta.class.pkl
        - match: '\}'
          scope: punctuation.section.class.end.pkl
          set: after-expression
        - include: main
    - match: ''
      pop: true

  object-declaration:
    - match: '\b(new)\s+(?:(Dynamic)|({{ident}}))'
      captures:
        1: keyword.pkl
        2: keyword.pkl
        3: entity.name.class.pkl

  type:
    - match: \b(Pair|Collection|List|Set|Map|Listing|Mapping)\b
      scope: storage.type.pkl
      push:
        - match: '(?=<)'
          push: generic-angles
        - match: ''
          pop: true
    - match: \b(U?Int(?:8|16|32)?|String|Uri|Char|Comparable|Boolean|Float|Number|Dynamic)\b
      scope: storage.type.pkl
    - match: \b(Any|nothing)\b
      scope: storage.type.class.pkl
    - match: '\b{{ident}}\b'
      scope: entity.name.type.pkl
    - match: '\|'
      scope: punctuation.separator.sequence.pkl
    - match: '\*'
      scope: punctuation.definition.annotation.pkl
    - match: '(?=\()'
      push: type-constraint
    - match: ''
      pop: true

  type-constraint:
    - meta_content_scope: meta.type.constraint.pkl
    - match: '\)'
      scope: punctuation.section.parens.end.pkl
      set: after-expression
    - match: '\('
      scope: punctuation.section.parens.begin.pkl
      push: type-constraint-contents

  type-constraint-contents:
    - match: '(?=\))'
      pop: true
    - include: main

  generic-angles:
    - meta_content_scope: meta.generic.pkl
    - match: '>'
      scope: punctuation.definition.generic.end.pkl
      set: after-expression
    - match: '<'
      scope: punctuation.definition.generic.begin.pkl
      push: generic-angles-contents

  generic-angles-contents:
    - match: '(?=>)'
      pop: true
    - match: '(,)\s*'
      scope: punctuation.separator.pkl
    - include: type

  typealias:
    - match: '(typealias)\s+({{ident}})\s*(=)\s*({{type}})'
      captures:
        0: meta.typealias.pkl
        1: keyword.declaration.class.pkl
        2: entity.name.type.pkl
        3: keyword.operator.assignment.pkl
        4: entity.name.type.pkl

  # forPattern:
  #   - match: '\b(for)\s*\(({{ident}})(?:\s*,\s*({{ident}}))*\s+(in)\s+({{ident}})\)'
  #     captures:
  #       1: keyword.control.loop.for.pkl
  #       2: variable.other.pkl
  #       3: variable.other.pkl
  #       4: keyword.pkl
  #       5: variable.other.pkl

  functions:
    - match: '\b(function)\s+({{ident}})'
      captures:
        0: meta.function.pkl
        1: keyword.pkl
        2: entity.name.function.pkl

  lambda-function:
    - match: '(\({{ident}}\))\s*(\->)\s*'
      captures:
        0: meta.function.anonymous.pkl
        1: variable.other.pkl
        2: keyword.operator.pkl

  isPattern:
    - match: '(`?)({{ident}})(`?)\s+(is)\s+'
      captures:
        1: punctuation.section.quoted.begin.pkl
        2: variable.other.pkl
        3: punctuation.section.quoted.end.pkl
        4: keyword.pkl
      push: type

  member-predicate:
    - match: '\[\['
      scope: punctuation.section.group.begin.pkl
      push:
        - meta_content_scope: meta.member-predicate.pkl
        - match: '\]\]'
          scope: punctuation.section.group.end.pkl
          pop: true
        - include: main

  after-expression:
    - match: (\.)(?={{ident}})
      scope: punctuation.accessor.dot.pkl
      push:
        - match: '{{duration_unit}}'
          scope: support.type.duration.pkl
          push: after-expression
        - match: '{{data_size_unit}}'
          scope: support.type.data_size.pkl
          push: after-expression
        - match: ''
          pop: true
    - match: \s*(:)\s*
      scope: punctuation.separator.pkl
      push: type
    - match: ''
      pop: true

  brackets:
    - match: \(
      scope: punctuation.section.parens.begin.pkl
      push:
        - match: \)
          scope: punctuation.section.parens.end.pkl
          set: after-expression
        - include: main
    - match: \[
      scope: punctuation.section.brackets.begin.pkl
      push:
        - match: \]
          scope: punctuation.section.brackets.end.pkl
          set: after-expression
        - include: main
    - match: '\{'
      scope: punctuation.section.block.begin.pkl
      push:
        - meta_content_scope: meta.block.pkl
        - match: '\}'
          scope: punctuation.section.block.end.pkl
          set: after-expression
        - include: main

